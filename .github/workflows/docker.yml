name: CI/CD Docker Compose Multi-Service

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # =========================
      # Build & run Docker Compose
      # =========================
      - name: Build and run Docker Compose
        run: |
          docker compose up -d --build
          echo "Waiting for services to be healthy..."
          sleep 20  # có thể thay bằng wait-for-it.sh

      # =========================
      # Register user (tạo admin)
      # =========================
      - name: Test Register API
        id: register-test
        run: |
          RESPONSE=$(curl -s -X POST http://localhost:3003/auth/register \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"123456"}')
          echo "Register Response: $RESPONSE"
          USER_ID=$(echo $RESPONSE | jq -r '._id')
          if [ -z "$USER_ID" ] || [ "$USER_ID" == "null" ]; then
            # Nếu user đã tồn tại, vẫn tiếp tục
            if ! echo $RESPONSE | grep -q "already exists"; then
              echo "Register failed"
              exit 1
            fi
          fi

      # =========================
      # Login API
      # =========================
      - name: Test Login API
        id: login-test
        run: |
          RESPONSE=$(curl -s -X POST http://localhost:3003/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"123456"}')
          echo "Login Response: $RESPONSE"
          TOKEN=$(echo $RESPONSE | jq -r '.token')
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Login failed"
            exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_ENV

      # =========================
      # Product APIs
      # =========================
      - name: Test Product APIs
        run: |
          # GET all products
          curl -s -H "Authorization: Bearer ${{ env.token }}" http://localhost:3003/products/api/products || exit 1

          # POST create a new product
          CREATE_RESPONSE=$(curl -s -X POST http://localhost:3003/products/api/products \
            -H "Authorization: Bearer ${{ env.token }}" \
            -H "Content-Type: application/json" \
            -d '{"name":"Test Product","price":100,"description":"Product for CI testing"}')
          echo "Create Response: $CREATE_RESPONSE"
          PRODUCT_ID=$(echo $CREATE_RESPONSE | jq -r '.id')
          if [ -z "$PRODUCT_ID" ] || [ "$PRODUCT_ID" == "null" ]; then
            echo "Create product failed"
            exit 1
          fi
          echo "product_id=$PRODUCT_ID" >> $GITHUB_ENV

          # GET product detail by id
          curl -s -H "Authorization: Bearer ${{ env.token }}" http://localhost:3003/products/api/products/${{ env.product_id }} || exit 1

      # =========================
      # Push Docker images (từng service)
      # =========================
      - name: Build & Push Auth Service
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/auth-service:latest ./auth-service
          docker push ${{ env.DOCKERHUB_USERNAME }}/auth-service:latest

      - name: Build & Push Product Service
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/product-service:latest ./product-service
          docker push ${{ env.DOCKERHUB_USERNAME }}/product-service:latest

      - name: Build & Push Order Service
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/order-service:latest ./order-service
          docker push ${{ env.DOCKERHUB_USERNAME }}/order-service:latest

      - name: Build & Push API Gateway
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/api-gateway:latest ./api-gateway
          docker push ${{ env.DOCKERHUB_USERNAME }}/api-gateway:latest

      # =========================
      # Cleanup Docker Compose
      # =========================
      - name: Stop Docker Compose
        if: always()
        run: docker compose down
